function sendYandexGoal(a){yaCounter37696905.reachGoal(a),ga("send","pageview","/"+a+".html")}function myValidateForm(a){a.find(".req");a.find(".req").removeClass("error");var e=!0;return a.find(".req").each(function(r,n){var t=$(n);if(""==t.val()&&($(n).addClass("error"),e=!1),"checkbox"==t.attr("type")&&0==t.prop("checked")&&($(n).addClass("error"),e=!1),"EMAIL"===t.attr("name")&&""===t.val()||"EMAIL"!==t.attr("name")||isValidEmailAddress(t.val())||($(n).addClass("error"),e=!1),"PASSWORD"===t.attr("name")){var i=!1;""===t.val()||t.val().length<6&&(i=!0),i&&($(n).addClass("error"),e=!1)}if("CONFIRM_PASSWORD"===t.attr("name")){var d=!1,s=a.find(".req[name=PASSWORD]");""===t.val()||t.val()!==s.val()&&(d=!0),d&&($(n).addClass("error"),e=!1)}}),e}function SendAjax(a,e,r){r=r||function(){},$.ajax({url:"/ajax.php",dataType:"json",type:"POST",data:{action:a,data:e},error:function(a){console.log(a)}}).done(function(a){r(a)})}function isValidEmailAddress(a){var e=new RegExp(/^(("[\w-\s]+")|([\w-]+(?:\.[\w-]+)*)|("[\w-\s]+")([\w-]+(?:\.[\w-]+)*))(@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/i);return e.test(a)}$.fn.serializeObject=function(){var a=this,e={},r={},n={validate:/^[a-zA-Z][a-zA-Z0-9_]*(?:\[(?:\d*|[a-zA-Z0-9_]+)\])*$/,key:/[a-zA-Z0-9_]+|(?=\[\])/g,push:/^$/,fixed:/^\d+$/,named:/^[a-zA-Z0-9_]+$/};return this.build=function(a,e,r){return a[e]=r,a},this.push_counter=function(a){return void 0===r[a]&&(r[a]=0),r[a]++},$.each($(this).serializeArray(),function(){if(n.validate.test(this.name)){for(var r,t=this.name.match(n.key),i=this.value,d=this.name;void 0!==(r=t.pop());)d=d.replace(new RegExp("\\["+r+"\\]$"),""),r.match(n.push)?i=a.build([],a.push_counter(d),i):r.match(n.fixed)?i=a.build([],r,i):r.match(n.named)&&(i=a.build({},r,i));e=$.extend(!0,e,i)}}),e};
$(document).ready(function(){$(".js-slider-main").slick({dots:!0,infinite:!0,speed:300,slidesToShow:1,arrows:!1,fade:!0}),$(".js-scrollbar").mCustomScrollbar(),$("[name=PHONE]").mask("+7(999)-999-99-99"),$("body").on("submit",".js-form-submit",function(t){t.preventDefault();var i=$(this);if(!myValidateForm(i))return!1;var s=i.serializeObject();SendAjax("SEND_FORM",s,function(t){i.html(t.html)})}),$("body").on("blur",".js-form-submit input",function(){var t=$(this).closest(".js-form-submit");if(!myValidateForm(t))return!1})});
//# sourceMappingURL=data:application/json;base64,
